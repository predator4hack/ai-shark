from typing import Dict, Any
from datetime import datetime

class MarkdownGenerator:
    def __init__(self):
        self.template = """
# Executive Research Report

**Company:** {company_name}  
**Person of Interest:** {person_name} ({role})  
**Generated:** {timestamp}  

## Executive Summary

{executive_summary}

## Profile Overview

{overview}

{detailed_profiles}

## AI Analysis Notes

This report is generated based on AI analysis of publicly available web search results. Data completeness and accuracy depend on the information found by the search APIs.

---
*Generated by Multi-API Research System*
"""
    
    def generate_markdown(self, analyzed_data: Dict[str, Any], 
                         company_name: str, person_name: str, role: str) -> str:
        """Generate structured markdown report for a person."""
        
        people = analyzed_data.get('person_and_roles', [])
        
        executive_summary = self._generate_executive_summary(people, company_name, person_name, role)
        overview = self._generate_overview(people)
        detailed_profiles = self._generate_detailed_profiles(people)
        
        report = self.template.format(
            company_name=company_name,
            person_name=person_name,
            role=role,
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            executive_summary=executive_summary,
            overview=overview,
            detailed_profiles=detailed_profiles,
        )
        
        return report
    
    def _generate_executive_summary(self, people: list[Dict], company_name: str, person_name: str, role: str) -> str:
        if not people:
            return f"No detailed information found for {person_name} at {company_name}."
        
        person = people[0] # Assume the first person is the main subject
        summary = f"This report details the profile of {person.get('name', person_name)}, the {person.get('current_role', role)} of {company_name}."
        
        achievements = person.get('achievements', [])
        if achievements:
            summary += f" Notable achievements include: {achievements[0]}."
            
        return summary

    def _generate_overview(self, people: list[Dict]) -> str:
        if not people:
            return "No profile information available."
        
        overview = "| Name | Current Role | Education | Notable Experience |\n"
        overview += "|------|--------------|-----------|-------------------|\n"
        
        for person in people:
            name = person.get('name', 'Unknown')
            current_role = person.get('current_role', 'Unknown')
            education = person.get('education', [])
            edu_summary = education[0].get('institution', 'Unknown') if education else 'Unknown'
            experience = person.get('professional_experience', []) # Changed from 'experience'
            exp_summary = experience[0].get('company', 'Unknown') if experience else 'Unknown'
            
            overview += f"| {name} | {current_role} | {edu_summary} | {exp_summary} |\n"
        
        return overview

    def _generate_detailed_profiles(self, people: list[Dict]) -> str:
        if not people:
            return ""
        
        profiles = ""
        for i, person in enumerate(people, 1):
            profiles += f"\n## Profile: {person.get('name', 'Unknown')}\n\n"
            
            if person.get('current_role'):
                profiles += f"**Role:** {person['current_role']}\n\n"
            
            education = person.get('education', [])
            if education:
                profiles += "### Education\n"
                for edu in education:
                    profiles += f"- **{edu.get('institution', '')}** - {edu.get('degree', '')} ({edu.get('year', '')})\n"
                profiles += "\n"
            
            professional_experience = person.get('professional_experience', []) # Changed from 'experience'
            if professional_experience:
                profiles += "### Professional Experience\n"
                for exp in professional_experience:
                    profiles += f"- **{exp.get('position', '')}** at **{exp.get('company', '')}** ({exp.get('duration', '')})\n"
                profiles += "\n"
            
            entrepreneurial_experience = person.get('entrepreneurial_experience', []) # Changed from 'entrepreneurial_background'
            if entrepreneurial_experience:
                profiles += "### Entrepreneurial Experience\n"
                for venture in entrepreneurial_experience:
                    profiles += f"- {venture}\n"
                profiles += "\n"
            
            achievements = person.get('achievements', [])
            if achievements:
                profiles += "### Notable Achievements\n"
                for achievement in achievements:
                    profiles += f"- {achievement}\n"
                profiles += "\n"
            
            skills = person.get('skills', [])
            if skills:
                profiles += f"**Key Skills:** {', '.join(skills)}\n\n"

            personal_background = person.get('personal_background', []) # Added personal_background
            if personal_background:
                profiles += "### Personal Background\n"
                for item in personal_background:
                    profiles += f"- {item}\n"
                profiles += "\n"
        
        return profiles

    def _calculate_completeness(self, people: list[Dict]) -> str:
        # This method is no longer used as data_quality is removed from template
        return "N/A"